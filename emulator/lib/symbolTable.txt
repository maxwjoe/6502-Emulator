In archive lib/libCpuEmulator.a:

AddressModes.o:     file format elf64-x86-64

SYMBOL TABLE:
0000000000000000 l    df *ABS*	0000000000000000 AddressModes.c
0000000000000000 l    d  .text	0000000000000000 .text
0000000000000000 g     F .text	000000000000002d ADDR_ZP
0000000000000000         *UND*	0000000000000000 CPUFetchByte
000000000000002d g     F .text	0000000000000052 ADDR_ZPX
0000000000000000         *UND*	0000000000000000 CPUGetX
000000000000007f g     F .text	0000000000000052 ADDR_ZPY
0000000000000000         *UND*	0000000000000000 CPUGetY
00000000000000d1 g     F .text	000000000000002d ADDR_AB
0000000000000000         *UND*	0000000000000000 CPUFetchWord
00000000000000fe g     F .text	0000000000000048 ADDR_ABX
0000000000000146 g     F .text	0000000000000048 ADDR_ABY
000000000000018e g     F .text	000000000000005d ADDR_INX
0000000000000000         *UND*	0000000000000000 MemoryReadWord
00000000000001eb g     F .text	000000000000005d ADDR_INY



CPU6502.o:     file format elf64-x86-64

SYMBOL TABLE:
0000000000000000 l    df *ABS*	0000000000000000 CPU6502.c
0000000000000000 l    d  .text	0000000000000000 .text
000000000000078b l     F .text	000000000000069e setupFunctionPointers
0000000000000000 l    d  .rodata	0000000000000000 .rodata
0000000000000000 g     F .text	0000000000000081 CPUNew
0000000000000000         *UND*	0000000000000000 malloc
0000000000000000         *UND*	0000000000000000 calloc
0000000000000081 g     F .text	0000000000000083 CPUReset
00000000000001c3 g     F .text	0000000000000084 CPUSetStatusFlag
0000000000000000         *UND*	0000000000000000 MemoryReset
0000000000000104 g     F .text	000000000000005f CPUFetchByte
0000000000000000         *UND*	0000000000000000 MemoryReadByte
0000000000000163 g     F .text	0000000000000060 CPUFetchWord
0000000000000000         *UND*	0000000000000000 MemoryReadWord
0000000000000247 g     F .text	0000000000000042 CPUGetStatusFlag
0000000000000289 g     F .text	0000000000000020 CPUGetStatusRegister
00000000000002a9 g     F .text	000000000000002d CPUSetStatusRegister
00000000000002d6 g     F .text	000000000000021c CPUDump
0000000000000000         *UND*	0000000000000000 puts
0000000000000000         *UND*	0000000000000000 printf
00000000000004f2 g     F .text	000000000000001f CPUGetPC
0000000000000511 g     F .text	0000000000000020 CPUGetSP
0000000000000531 g     F .text	0000000000000020 CPUGetA
0000000000000551 g     F .text	0000000000000020 CPUGetX
0000000000000571 g     F .text	0000000000000020 CPUGetY
0000000000000591 g     F .text	0000000000000025 CPUSetPC
00000000000005b6 g     F .text	0000000000000024 CPUSetSP
00000000000005da g     F .text	0000000000000024 CPUSetA
00000000000005fe g     F .text	0000000000000024 CPUSetX
0000000000000622 g     F .text	0000000000000024 CPUSetY
0000000000000646 g     F .text	000000000000002e CPUIncrementSP
0000000000000674 g     F .text	000000000000002d CPUIncrementPC
00000000000006a1 g     F .text	000000000000003d CPUFree
0000000000000000         *UND*	0000000000000000 free
00000000000006de g     F .text	00000000000000ad CPUExecute
0000000000000000         *UND*	0000000000000000 _GLOBAL_OFFSET_TABLE_
0000000000000000         *UND*	0000000000000000 INS_LDA_IM
0000000000000000         *UND*	0000000000000000 INS_LDA_ZP
0000000000000000         *UND*	0000000000000000 INS_LDA_ZPX
0000000000000000         *UND*	0000000000000000 INS_LDA_AB
0000000000000000         *UND*	0000000000000000 INS_LDA_ABX
0000000000000000         *UND*	0000000000000000 INS_LDA_ABY
0000000000000000         *UND*	0000000000000000 INS_LDA_INX
0000000000000000         *UND*	0000000000000000 INS_LDA_INY
0000000000000000         *UND*	0000000000000000 INS_LDX_IM
0000000000000000         *UND*	0000000000000000 INS_LDX_ZP
0000000000000000         *UND*	0000000000000000 INS_LDX_ZPY
0000000000000000         *UND*	0000000000000000 INS_LDX_AB
0000000000000000         *UND*	0000000000000000 INS_LDX_ABY
0000000000000000         *UND*	0000000000000000 INS_LDY_IM
0000000000000000         *UND*	0000000000000000 INS_LDY_ZP
0000000000000000         *UND*	0000000000000000 INS_LDY_ZPX
0000000000000000         *UND*	0000000000000000 INS_LDY_AB
0000000000000000         *UND*	0000000000000000 INS_LDY_ABX
0000000000000000         *UND*	0000000000000000 INS_STA_ZP
0000000000000000         *UND*	0000000000000000 INS_STA_ZPX
0000000000000000         *UND*	0000000000000000 INS_STA_AB
0000000000000000         *UND*	0000000000000000 INS_STA_ABX
0000000000000000         *UND*	0000000000000000 INS_STA_ABY
0000000000000000         *UND*	0000000000000000 INS_STA_INX
0000000000000000         *UND*	0000000000000000 INS_STA_INY
0000000000000000         *UND*	0000000000000000 INS_STX_ZP
0000000000000000         *UND*	0000000000000000 INS_STX_ZPY
0000000000000000         *UND*	0000000000000000 INS_STX_AB
0000000000000000         *UND*	0000000000000000 INS_STY_ZP
0000000000000000         *UND*	0000000000000000 INS_STY_ZPX
0000000000000000         *UND*	0000000000000000 INS_STY_AB
0000000000000000         *UND*	0000000000000000 INS_TAX_IMP
0000000000000000         *UND*	0000000000000000 INS_TAY_IMP
0000000000000000         *UND*	0000000000000000 INS_TXA_IMP
0000000000000000         *UND*	0000000000000000 INS_TYA_IMP
0000000000000000         *UND*	0000000000000000 INS_TSX_IMP
0000000000000000         *UND*	0000000000000000 INS_TXS_IMP
0000000000000000         *UND*	0000000000000000 INS_PHA_IMP
0000000000000000         *UND*	0000000000000000 INS_PHP_IMP
0000000000000000         *UND*	0000000000000000 INS_PLA_IMP
0000000000000000         *UND*	0000000000000000 INS_PLP_IMP
0000000000000000         *UND*	0000000000000000 INS_AND_IM
0000000000000000         *UND*	0000000000000000 INS_AND_ZP
0000000000000000         *UND*	0000000000000000 INS_AND_ZPX
0000000000000000         *UND*	0000000000000000 INS_AND_AB
0000000000000000         *UND*	0000000000000000 INS_AND_ABX
0000000000000000         *UND*	0000000000000000 INS_AND_ABY
0000000000000000         *UND*	0000000000000000 INS_AND_INX
0000000000000000         *UND*	0000000000000000 INS_AND_INY
0000000000000000         *UND*	0000000000000000 INS_EOR_IM
0000000000000000         *UND*	0000000000000000 INS_EOR_ZP
0000000000000000         *UND*	0000000000000000 INS_EOR_ZPX
0000000000000000         *UND*	0000000000000000 INS_EOR_AB
0000000000000000         *UND*	0000000000000000 INS_EOR_ABX
0000000000000000         *UND*	0000000000000000 INS_EOR_ABY
0000000000000000         *UND*	0000000000000000 INS_EOR_INX
0000000000000000         *UND*	0000000000000000 INS_EOR_INY
0000000000000000         *UND*	0000000000000000 INS_ORA_IM
0000000000000000         *UND*	0000000000000000 INS_ORA_ZP
0000000000000000         *UND*	0000000000000000 INS_ORA_ZPX
0000000000000000         *UND*	0000000000000000 INS_ORA_AB
0000000000000000         *UND*	0000000000000000 INS_ORA_ABX
0000000000000000         *UND*	0000000000000000 INS_ORA_ABY
0000000000000000         *UND*	0000000000000000 INS_ORA_INX
0000000000000000         *UND*	0000000000000000 INS_ORA_INY
0000000000000000         *UND*	0000000000000000 INS_BIT_ZP
0000000000000000         *UND*	0000000000000000 INS_BIT_AB
0000000000000000         *UND*	0000000000000000 INS_ADC_IM
0000000000000000         *UND*	0000000000000000 INS_ADC_ZP
0000000000000000         *UND*	0000000000000000 INS_JSR_AB



fileIO.o:     file format elf64-x86-64

SYMBOL TABLE:
0000000000000000 l    df *ABS*	0000000000000000 fileIO.c
0000000000000000 l    d  .text	0000000000000000 .text
0000000000000000 l    d  .rodata	0000000000000000 .rodata
0000000000000000 g     F .text	00000000000002c8 FIODumpCPU
0000000000000000         *UND*	0000000000000000 fopen
0000000000000000         *UND*	0000000000000000 time
0000000000000000         *UND*	0000000000000000 fwrite
0000000000000000         *UND*	0000000000000000 ctime
0000000000000000         *UND*	0000000000000000 fprintf
0000000000000000         *UND*	0000000000000000 CPUGetPC
0000000000000000         *UND*	0000000000000000 CPUGetSP
0000000000000000         *UND*	0000000000000000 CPUGetA
0000000000000000         *UND*	0000000000000000 CPUGetX
0000000000000000         *UND*	0000000000000000 CPUGetY
0000000000000000         *UND*	0000000000000000 MemoryReadByte
0000000000000000         *UND*	0000000000000000 fclose
0000000000000000         *UND*	0000000000000000 __stack_chk_fail
00000000000002c8 g     F .text	0000000000000111 FIOReadBinary
0000000000000000         *UND*	0000000000000000 puts
0000000000000000         *UND*	0000000000000000 memset
0000000000000000         *UND*	0000000000000000 fread



Instructions.o:     file format elf64-x86-64

SYMBOL TABLE:
0000000000000000 l    df *ABS*	0000000000000000 Instructions.c
0000000000000000 l    d  .text	0000000000000000 .text
0000000000000000 l     F .text	000000000000001f s_IncrementCycles
000000000000001f g     F .text	000000000000004f INS_LDA_IM
0000000000000000         *UND*	0000000000000000 CPUFetchByte
0000000000000000         *UND*	0000000000000000 CPUSetA
0000000000000000         *UND*	0000000000000000 STAT_Accumulator
000000000000006e g     F .text	0000000000000049 INS_LDA_ZP
0000000000000000         *UND*	0000000000000000 ADDR_ZP
0000000000000000         *UND*	0000000000000000 OPER_LDA
00000000000000b7 g     F .text	0000000000000049 INS_LDA_ZPX
0000000000000000         *UND*	0000000000000000 ADDR_ZPX
0000000000000100 g     F .text	000000000000004a INS_LDA_AB
0000000000000000         *UND*	0000000000000000 ADDR_AB
000000000000014a g     F .text	000000000000004a INS_LDA_ABX
0000000000000000         *UND*	0000000000000000 ADDR_ABX
0000000000000194 g     F .text	000000000000004a INS_LDA_ABY
0000000000000000         *UND*	0000000000000000 ADDR_ABY
00000000000001de g     F .text	000000000000004a INS_LDA_INX
0000000000000000         *UND*	0000000000000000 ADDR_INX
0000000000000228 g     F .text	000000000000004a INS_LDA_INY
0000000000000000         *UND*	0000000000000000 ADDR_INY
0000000000000272 g     F .text	000000000000004f INS_LDX_IM
0000000000000000         *UND*	0000000000000000 CPUSetX
0000000000000000         *UND*	0000000000000000 STAT_XRegister
00000000000002c1 g     F .text	0000000000000049 INS_LDX_ZP
0000000000000000         *UND*	0000000000000000 OPER_LDX
000000000000030a g     F .text	0000000000000049 INS_LDX_ZPY
0000000000000000         *UND*	0000000000000000 ADDR_ZPY
0000000000000353 g     F .text	000000000000004a INS_LDX_AB
000000000000039d g     F .text	000000000000004a INS_LDX_ABY
00000000000003e7 g     F .text	000000000000004f INS_LDY_IM
0000000000000000         *UND*	0000000000000000 CPUSetY
0000000000000000         *UND*	0000000000000000 STAT_YRegister
0000000000000436 g     F .text	0000000000000049 INS_LDY_ZP
0000000000000000         *UND*	0000000000000000 OPER_LDY
000000000000047f g     F .text	0000000000000049 INS_LDY_ZPX
00000000000004c8 g     F .text	000000000000004a INS_LDY_AB
0000000000000512 g     F .text	000000000000004a INS_LDY_ABX
000000000000055c g     F .text	0000000000000049 INS_STA_ZP
0000000000000000         *UND*	0000000000000000 OPER_STA
00000000000005a5 g     F .text	0000000000000049 INS_STA_ZPX
00000000000005ee g     F .text	000000000000004a INS_STA_AB
0000000000000638 g     F .text	000000000000004a INS_STA_ABX
0000000000000682 g     F .text	000000000000004a INS_STA_ABY
00000000000006cc g     F .text	000000000000004a INS_STA_INX
0000000000000716 g     F .text	000000000000004a INS_STA_INY
0000000000000760 g     F .text	0000000000000049 INS_STX_ZP
0000000000000000         *UND*	0000000000000000 OPER_STX
00000000000007a9 g     F .text	0000000000000049 INS_STX_ZPY
00000000000007f2 g     F .text	000000000000004a INS_STX_AB
000000000000083c g     F .text	0000000000000049 INS_STY_ZP
0000000000000000         *UND*	0000000000000000 OPER_STY
0000000000000885 g     F .text	0000000000000049 INS_STY_ZPX
00000000000008ce g     F .text	000000000000004a INS_STY_AB
0000000000000918 g     F .text	0000000000000055 INS_TAX_IMP
0000000000000000         *UND*	0000000000000000 CPUGetA
000000000000096d g     F .text	0000000000000055 INS_TAY_IMP
00000000000009c2 g     F .text	0000000000000055 INS_TXA_IMP
0000000000000000         *UND*	0000000000000000 CPUGetX
0000000000000a17 g     F .text	0000000000000055 INS_TYA_IMP
0000000000000000         *UND*	0000000000000000 CPUGetY
0000000000000a6c g     F .text	0000000000000055 INS_TSX_IMP
0000000000000000         *UND*	0000000000000000 CPUGetSP
0000000000000ac1 g     F .text	0000000000000049 INS_TXS_IMP
0000000000000000         *UND*	0000000000000000 CPUSetSP
0000000000000b0a g     F .text	00000000000000b4 INS_PHA_IMP
0000000000000000         *UND*	0000000000000000 MemoryWriteToStack
0000000000000000         *UND*	0000000000000000 CPUIncrementSP
0000000000000bbe g     F .text	00000000000000b4 INS_PHP_IMP
0000000000000000         *UND*	0000000000000000 CPUGetStatusRegister
0000000000000c72 g     F .text	000000000000008c INS_PLA_IMP
0000000000000000         *UND*	0000000000000000 MemoryReadFromStack
0000000000000cfe g     F .text	0000000000000080 INS_PLP_IMP
0000000000000000         *UND*	0000000000000000 CPUSetStatusRegister
0000000000000d7e g     F .text	0000000000000064 INS_AND_IM
0000000000000de2 g     F .text	0000000000000049 INS_AND_ZP
0000000000000000         *UND*	0000000000000000 OPER_AND
0000000000000e2b g     F .text	0000000000000049 INS_AND_ZPX
0000000000000e74 g     F .text	000000000000004a INS_AND_AB
0000000000000ebe g     F .text	000000000000004a INS_AND_ABX
0000000000000f08 g     F .text	000000000000004a INS_AND_ABY
0000000000000f52 g     F .text	000000000000004a INS_AND_INX
0000000000000f9c g     F .text	000000000000004a INS_AND_INY
0000000000000fe6 g     F .text	0000000000000064 INS_EOR_IM
000000000000104a g     F .text	0000000000000049 INS_EOR_ZP
0000000000000000         *UND*	0000000000000000 OPER_EOR
0000000000001093 g     F .text	0000000000000049 INS_EOR_ZPX
00000000000010dc g     F .text	000000000000004a INS_EOR_AB
0000000000001126 g     F .text	000000000000004a INS_EOR_ABX
0000000000001170 g     F .text	000000000000004a INS_EOR_ABY
00000000000011ba g     F .text	000000000000004a INS_EOR_INX
0000000000001204 g     F .text	000000000000004a INS_EOR_INY
000000000000124e g     F .text	0000000000000064 INS_ORA_IM
00000000000012b2 g     F .text	0000000000000049 INS_ORA_ZP
0000000000000000         *UND*	0000000000000000 OPER_ORA
00000000000012fb g     F .text	0000000000000049 INS_ORA_ZPX
0000000000001344 g     F .text	000000000000004a INS_ORA_AB
000000000000138e g     F .text	000000000000004a INS_ORA_ABX
00000000000013d8 g     F .text	000000000000004a INS_ORA_ABY
0000000000001422 g     F .text	000000000000004a INS_ORA_INX
000000000000146c g     F .text	000000000000004a INS_ORA_INY
00000000000014b6 g     F .text	0000000000000049 INS_BIT_ZP
0000000000000000         *UND*	0000000000000000 OPER_BIT
00000000000014ff g     F .text	000000000000004a INS_BIT_AB
0000000000001549 g     F .text	0000000000000098 INS_ADC_IM
0000000000000000         *UND*	0000000000000000 CPUGetStatusFlag
0000000000000000         *UND*	0000000000000000 STAT_ADC
00000000000015e1 g     F .text	0000000000000049 INS_ADC_ZP
0000000000000000         *UND*	0000000000000000 OPER_ADC
000000000000162a g     F .text	00000000000000fe INS_JSR_AB
0000000000000000         *UND*	0000000000000000 CPUIncrementPC
0000000000000000         *UND*	0000000000000000 CPUGetPC
0000000000000000         *UND*	0000000000000000 MemoryWrite
0000000000000000         *UND*	0000000000000000 CPUSetPC



Memory.o:     file format elf64-x86-64

SYMBOL TABLE:
0000000000000000 l    df *ABS*	0000000000000000 Memory.c
0000000000000000 l    d  .text	0000000000000000 .text
0000000000000000 l    d  .rodata	0000000000000000 .rodata
0000000000000422 l     F .text	000000000000003d s_MemoryBounds
0000000000000000 g     F .text	0000000000000090 MemoryNew
0000000000000000         *UND*	0000000000000000 malloc
0000000000000000         *UND*	0000000000000000 calloc
0000000000000000         *UND*	0000000000000000 free
0000000000000090 g     F .text	0000000000000086 MemoryLoadBinary
0000000000000000         *UND*	0000000000000000 fopen
0000000000000000         *UND*	0000000000000000 fread
0000000000000000         *UND*	0000000000000000 fclose
0000000000000116 g     F .text	00000000000000a0 MemoryHexDump
0000000000000000         *UND*	0000000000000000 printf
00000000000001b6 g     F .text	0000000000000064 MemoryReadByte
000000000000021a g     F .text	000000000000009e MemoryReadWord
00000000000002b8 g     F .text	0000000000000034 MemoryReadFromStack
00000000000002ec g     F .text	0000000000000059 MemoryWrite
0000000000000345 g     F .text	0000000000000061 MemoryWriteToStack
00000000000003a6 g     F .text	000000000000003f MemoryReset
0000000000000000         *UND*	0000000000000000 memset
00000000000003e5 g     F .text	000000000000003d MemoryFree
0000000000000000         *UND*	0000000000000000 puts



Operations.o:     file format elf64-x86-64

SYMBOL TABLE:
0000000000000000 l    df *ABS*	0000000000000000 Operations.c
0000000000000000 l    d  .text	0000000000000000 .text
0000000000000000 g     F .text	0000000000000054 OPER_LDA
0000000000000000         *UND*	0000000000000000 MemoryReadByte
0000000000000000         *UND*	0000000000000000 CPUSetA
0000000000000460 g     F .text	000000000000005b STAT_Accumulator
0000000000000054 g     F .text	0000000000000054 OPER_LDX
0000000000000000         *UND*	0000000000000000 CPUSetX
00000000000004bb g     F .text	000000000000005b STAT_XRegister
00000000000000a8 g     F .text	0000000000000054 OPER_LDY
0000000000000000         *UND*	0000000000000000 CPUSetY
0000000000000516 g     F .text	000000000000005b STAT_YRegister
00000000000000fc g     F .text	0000000000000051 OPER_STA
0000000000000000         *UND*	0000000000000000 CPUGetA
0000000000000000         *UND*	0000000000000000 MemoryWrite
000000000000014d g     F .text	0000000000000051 OPER_STX
0000000000000000         *UND*	0000000000000000 CPUGetX
000000000000019e g     F .text	0000000000000051 OPER_STY
0000000000000000         *UND*	0000000000000000 CPUGetY
00000000000001ef g     F .text	0000000000000069 OPER_AND
0000000000000258 g     F .text	0000000000000069 OPER_EOR
00000000000002c1 g     F .text	0000000000000069 OPER_ORA
000000000000032a g     F .text	0000000000000099 OPER_BIT
0000000000000000         *UND*	0000000000000000 CPUSetStatusFlag
00000000000003c3 g     F .text	000000000000009d OPER_ADC
0000000000000000         *UND*	0000000000000000 CPUGetStatusFlag
0000000000000571 g     F .text	00000000000000b0 STAT_ADC


