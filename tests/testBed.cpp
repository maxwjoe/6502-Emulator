// === TESTBED : File to run all unit tests ===

#include "Eagle.h"
#include "./unitTests/testCPU.cpp"
#include "./unitTests/testLDA.cpp"
#include "./unitTests/testLDX.cpp"
#include "./unitTests/testLDY.cpp"
#include "./unitTests/testSTA.cpp"
#include "./unitTests/testSTX.cpp"
// #include "./unitTests/testADC.cpp"
#include "./unitTests/testClock.cpp"

int main()
{

    EAGLE_INIT(true);

    // CPU TESTS
    ADD_TEST(CPU_VIRTUAL_EMULATION, T_CREATE_CPU);
    ADD_TEST(CPU_VIRTUAL_EMULATION, T_CREATE_CPU_MEMORY);
    ADD_TEST(CPU_VIRTUAL_EMULATION, T_READ_WRITE_CPU_MEMORY);
    ADD_TEST(CPU_VIRTUAL_EMULATION, T_EXECUTE_NOP_TEN_CYCLES);
    ADD_TEST(CPU_VIRTUAL_EMULATION, T_CPU_EXIT_ON_INVALID_OPERATION);
    ADD_TEST(CPU_VIRTUAL_EMULATION, T_CPU_PROGRAM_COUNTER);
    ADD_TEST(CPU_VIRTUAL_EMULATION, T_CPU_READ_WRITE_STACK);

    // CLOCK TESTS
    ADD_TEST(CLOCK_VIRTUAL_EMULATION, T_CLOCK_CREATE);
    ADD_TEST(CLOCK_VIRTUAL_EMULATION, T_CLOCK_TICK);
    ADD_TEST(CLOCK_VIRTUAL_EMULATION, T_CLOCK_PERIOD_ONE_SECOND_THREE_TICKS);

    // LDA TESTS
    ADD_TEST(LDA, T_LDA_IM);
    ADD_TEST(LDA, T_LDA_ZP);
    ADD_TEST(LDA, T_LDA_ZPX);
    ADD_TEST(LDA, T_LDA_AB);
    ADD_TEST(LDA, T_LDA_ABY);
    ADD_TEST(LDA, T_LDA_ABX);
    ADD_TEST(LDA, T_LDA_INX);
    ADD_TEST(LDA, T_LDA_INY);
    ADD_TEST(LDA, T_LDA_N_FLAG);
    ADD_TEST(LDA, T_LDA_Z_FLAG);

    // LDX TESTS
    ADD_TEST(LDX, T_LDX_IM);
    ADD_TEST(LDX, T_LDX_ZP);
    ADD_TEST(LDX, T_LDX_ZPY);
    ADD_TEST(LDX, T_LDX_AB);
    ADD_TEST(LDX, T_LDX_ABY);

    // LDY TESTS
    ADD_TEST(LDY, T_LDY_IM);
    ADD_TEST(LDY, T_LDY_ZP);
    ADD_TEST(LDY, T_LDY_ZPX);
    ADD_TEST(LDY, T_LDY_AB);
    ADD_TEST(LDY, T_LDY_ABX);

    // STA TESTS
    ADD_TEST(STA, T_STA_ZP);
    ADD_TEST(STA, T_STA_ZPX);
    ADD_TEST(STA, T_STA_AB);
    ADD_TEST(STA, T_STA_ABX);
    ADD_TEST(STA, T_STA_ABY);
    ADD_TEST(STA, T_STA_INX);
    ADD_TEST(STA, T_STA_INY);

    // STX TESTS
    ADD_TEST(STX, T_STX_ZP);
    ADD_TEST(STX, T_STX_ZPY);
    ADD_TEST(STX, T_STX_AB);

    // ADD_TEST(ADC, T_ADC_IM_ONE_PLUS_ONE);
    // ADD_TEST(ADC, T_ADC_IM_HAS_CARRY_OVERFLOW);
    // ADD_TEST(ADC, T_ADC_ZP);

    // RUN_COLLECTION(STX);

    RUN_ALL_TESTS();

    EAGLE_EXIT();
}